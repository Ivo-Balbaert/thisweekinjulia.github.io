---
layout: post
title:  "This week in Julia: October 18"
date:   2014-10-18 20:00:00
categories: julia
---
This is the current draft for next-week's post.  Add things here you find valuable.  It'll auto-post... soon!


# Major breaking changes

* As anticipated from last week's integer arithmetic change, the usage of `itrunc` to truncate integers into a specific type has been removed.  Since this is intrinsically a modular arithmetic calculation, `rem` is now the way to do this, with the idiomatic syntax being `1234 % Uint8 == 0xd2`.  ([#8648](https://github.com/JuliaLang/julia/pull/8648))

# New proposals

Several new proposals (juleps) were submitted this week.

* Given that `convert` is one of the most heavily used functions in Julia, a renewed conversation about using `x as Foo` as sugar for `convert(Foo, x)::Foo` was started in [#8710](https://github.com/JuliaLang/julia/issues/8710).  
* @StefanKarpinski put together a coherent story for how APL-style indexing and lazy transpose behaviors could be combined to solve some of the current inconsistencies (like the double-transpose of a vector not being a vector, and vector dot products being one-element arrays). [#4774](https://github.com/JuliaLang/julia/issues/4774#issuecomment-59422003)

# 0.4 project updates

* @JeffBezanson managed to get the call-overload branch passing tests!  A few questions remain before it can get merged, though.  [#8712](https://github.com/JuliaLang/julia/pull/8712).
* And a postscript from last week.  An intrepid group has managed to successfully build the REPL with MSVC.  I missed including it last week, but I think it's worthy of a note.  See [#7761](https://github.com/JuliaLang/julia/pull/7761) for details.

# Package ecosystem

* A new compatibility package, [Compat.jl](https://groups.google.com/forum/#!searchin/julia-users/compat.jl/julia-users/Fobhly-DPNY/CzXOkJwVjN0J), was created to help package authors transition to the new syntaxes in 0.4.  See the [users list announcement](https://groups.google.com/forum/#!searchin/julia-users/compat.jl/julia-users/Fobhly-DPNY/CzXOkJwVjN0J) for more details.
* A new package, [GeometricalPredicates.jl](https://github.com/skariel/GeometricalPredicates.jl), provides fast, robust 2D and 3D geometrical predicates on generic point types.  See the announcement on the [julia-users mailing list for more details](https://groups.google.com/d/msg/julia-users/oTxuewsKMQw/_k1f5AOJx0sJ) for more details and some snazzy images:

[![Sample image](http://i.imgur.com/Gxaqbnlm.jpg)](http://i.imgur.com/Gxaqbnl.jpg)
